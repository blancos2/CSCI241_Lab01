/*
 * This source file was generated by the Gradle 'init' task
 */
package main.java.lab7;
import java.io.*;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;

import heap.Heap;
import java.util.*;

public class Huffman {
    static class Node implements Comparable<Node>{
        char character;
        int frequency;
        Node left;
        Node right;
        
        Node(char character, int frequency){
            this.character = character;
            this.frequency = frequency;
        }
        Node(Node left, Node right){
            this.left = left;
            this.right = right;
            this.frequency = left.frequency + right.frequency;
        }


       
        private static void buildCodeMap(Node node, String path, Map<Character, String> map){
            if (node == null) return;
            if (node.isitALeaf()){
                map.put(node.character, path);
                return;
            }
            buildCodeMap(node.left, path + "0", map);
            buildCodeMap(node.right, path + "1", map);
        }

        // ENCODE STRING 
            static String encode(String input, Map<Character, String> codeMap){
              StringBuilder encoded = new StringBuilder();
                for (char ch : input.toCharArray()) {
                    String code = codeMap.get(ch);
                    if (code != null) {
                        encoded.append(code);
                    } else {
                        throw new IllegalArgumentException("Character '" + ch + "' not found in code map.");
                    }
                }
        return encoded.toString();
        }

        // DECODE STRING 
         static String decode(String encodedString, Node root){
            StringBuilder decoded = new StringBuilder();
            Node current = root;

            for (char bit : encodedString.toCharArray()) {
                // Traverse the tree based on the bit
                current = (bit == '0') ? current.left : current.right;

                // If a leaf node is reached, append the character
                if (current.isitALeaf()) {
                    decoded.append(current.character);
                    current = root; // Restart from root for next sequence
                }
            }

            return decoded.toString();
        }

         // build Tree 
         static Node buildTree(Map<Character, Integer> freqMap){
             PriorityQueue<Node> minHeap = new PriorityQueue<>();

        // Create leaf nodes for each character and add to min-heap
        for (Map.Entry<Character, Integer> entry : freqMap.entrySet()) {
            minHeap.offer(new Node(entry.getKey(), entry.getValue()));
        }

        // Build the tree by combining two smallest nodes until one remains
        while (minHeap.size() > 1) {
            Node left = minHeap.poll();
            Node right = minHeap.poll();
            Node parent = new Node(left, right);
            minHeap.offer(parent);
        }

        // The remaining node is the root of the Huffman tree
        return minHeap.poll();

         }

         // count frequency of individual character using hash map 
         static Map<Character, Integer> countFrequencies(String input) {
            Map<Character, Integer> freqMap = new HashMap<>();
            for (char ch : input.toCharArray()) {
                freqMap.put(ch, freqMap.getOrDefault(ch, 0) + 1);
            }
            return freqMap;

           

}
 // HELPER METHODS ---------------------------

                    // helper method to confirm if node is a leaf via confirming no L/R children 
            boolean isitALeaf(){
            if (left == null && right == null){
                return true;
            }
            return false;
        }
        
        // helper method convert character from leaf into a string 
         public String toString(){
            return isitALeaf() ? "'" + character + "'" : "*";
        }

         // helper method: create comparsion for frequency counts for nodes 
        public int compareTo(Node other){
            return Integer.compare(this.frequency, other.frequency);
        }

            

    
}

  public static void main(String[] args) {
        if (args.length < 1){
            return;
        }
        String input = "";
        try{
            input = new String(Files.readAllBytes(Paths.get(args[0])));
        } catch (IOException e) {
            return;
        }

               
        Map<Character, Integer> freqMap = Node.countFrequencies(input);
        Node root = Node.buildTree(freqMap);
        if (root == null) return;
        Map<Character, String> codeMap = new HashMap<>();
        Node.buildCodeMap(root, "", codeMap);
        String encoded = Node.encode(input,codeMap);
        String decoded = Node.decode(encoded, root);
        if (input.length() < 100){
            System.out.println("Input string: " + input);
            System.out.println("Encoded string: " + encoded);
            System.out.println("Decoded string: " + decoded);
        }
        System.out.println("Decoded equals input: " + input.equals(decoded));
        double compressionRatio = (double) encoded.length() / (input.length() * 8.0);
        System.out.println("Compression ratio: " + compressionRatio);

       
     
    }
}
