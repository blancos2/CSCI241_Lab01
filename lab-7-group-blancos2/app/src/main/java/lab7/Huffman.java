/*
 * This source file was generated by the Gradle 'init' task
 */
package main.java.lab7;
import java.io.*;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;

import heap.Heap;
import java.util.*;

public class Huffman {
    static class Node implements Comparable<Node>{
        char character;
        int frequency;
        Node left;
        Node right;
        
        Node(char character, int frequency){
            this.character = character;
            this.frequency = frequency;
        }
        Node(Node left, Node right){
            this.left = left;
            this.right = right;
            this.frequency = left.frequency + right.frequency;
        }
        // method to confirm if node is a leaf via confirming no L/R children 

        boolean isitALeaf(){
            if (left == null && right == null){
                return true;
            }
            return false;
        }
        // convert character from leaf into a string 
         public String toString(){
            return isitALeaf() ? "'" + character + "'" : "*";
        }

        // create comparsion for frequency counts for nodes 
        public int compareTo(Node other){
            return Integer.compare(this.frequency, other.frequency);
        }
        private static void buildCodeMap(Node node, String path, Map<Character, String> map){
            if (node == null) return;
            if (node.isitALeaf()){
                map.put(node.character, path);
                return;
            }
            buildCodeMap(node.left, path + "0", map);
            buildCodeMap(node.right, path + "1", map);
        }

        // ENCODE STRING 
              static String encode(String input, Map<Character, String> codeMap){
            StringBuilder strb = new StringBuilder();
            for (char ch: input.toCharArray()){
                strb.append(codeMap.get(ch));
            }
            return strb.toString();
        }

        // DECODE STRING 
         static String decode(String encodedString, Node root){
               StringBuilder resultString = new StringBuilder();
            Node currentNode = root;
            for (char bit : encodedString.toCharArray()){
                currentNode = (bit == '0') ? currentNode.left : currentNode.right;
                if (currentNode.isitALeaf()){
                    resultString.append(currentNode.character);
                    currentNode = root;
                }
            }
            return resultString.toString();

         }

         // build Tree 
         static Node buildTree(Map<Character, Integer> freqMap){
             PriorityQueue<Node> minHeap = new PriorityQueue<>();

        // Step 1: Create leaf nodes for each character and add to min-heap
        for (Map.Entry<Character, Integer> entry : freqMap.entrySet()) {
            minHeap.offer(new Node(entry.getKey(), entry.getValue()));
        }

        // Step 2: Build the tree by combining two smallest nodes until one remains
        while (minHeap.size() > 1) {
            Node left = minHeap.poll();
            Node right = minHeap.poll();
            Node parent = new Node(left, right);
            minHeap.offer(parent);
        }

        // Step 3: The remaining node is the root of the Huffman tree
        return minHeap.poll();

         }

            

    
}

  public static void main(String[] args) {
        if (args.length < 1){
            return;
        }
        String input = "";
        try{
            input = new String(Files.readAllBytes(Paths.get(args[0])));
        } catch (IOException e) {
            return;
        }

       
     
    }
}
}